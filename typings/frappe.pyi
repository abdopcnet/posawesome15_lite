# Minimal type stubs for Frappe functions
# This helps VS Code provide better intellisense

from typing import Any, Dict, List, Optional, Union, Callable, TypeVar, Generic, Tuple, Set

T = TypeVar('T')

class _WrappedDatabaseQuery:
    def get_list(self, *args, **kwargs) -> List[Dict[str, Any]]: ...
    def get_all(self, *args, **kwargs) -> List[Dict[str, Any]]: ...
    def get_value(self, *args, **kwargs) -> Any: ...
    def get_single_value(self, *args, **kwargs) -> Any: ...
    def get_values(self, *args, **kwargs) -> List[Tuple]: ...
    def exists(self, *args, **kwargs) -> bool: ...
    def count(self, *args, **kwargs) -> int: ...
    def sql(self, *args, **kwargs) -> Any: ...

class _Document:
    name: str
    doctype: str
    owner: str
    creation: str
    modified: str
    modified_by: str
    idx: int
    docstatus: int
    
    def get(self, fieldname, default=None) -> Any: ...
    def update(self, data: Dict) -> None: ...
    def db_set(self, fieldname: str, value: Any, update_modified: bool = True) -> None: ...
    def get_doc(self, *args, **kwargs) -> '_Document': ...
    def get_cached_doc(self, *args, **kwargs) -> '_Document': ...
    def insert(self, ignore_permissions: bool = False, ignore_links: bool = False, ignore_if_duplicate: bool = False) -> '_Document': ...
    def save(self, ignore_permissions: bool = False) -> '_Document': ...
    def submit(self) -> '_Document': ...
    def cancel(self) -> '_Document': ...
    def delete(self) -> None: ...
    def run_method(self, method: str, *args, **kwargs) -> Any: ...

class _Frappe:
    # Database methods
    db: _WrappedDatabaseQuery
    
    # Document methods
    def get_doc(self, *args, **kwargs) -> _Document: ...
    def get_cached_doc(self, *args, **kwargs) -> _Document: ...
    def get_meta(self, doctype: str) -> Any: ...
    def get_list(self, *args, **kwargs) -> List[Dict[str, Any]]: ...
    def get_all(self, *args, **kwargs) -> List[Dict[str, Any]]: ...
    def get_value(self, *args, **kwargs) -> Any: ...
    def get_single_value(self, *args, **kwargs) -> Any: ...
    def get_values(self, *args, **kwargs) -> List[Tuple]: ...
    
    # Error handling
    def throw(self, msg: str, exc: Any = None) -> None: ...
    def msgprint(self, msg: str, title: Optional[str] = None, indicator: Optional[str] = None) -> None: ...
    
    # Logging
    def log_error(self, title: Optional[str] = None, message: Any = None) -> Any: ...
    
    # Utilities
    def format_value(self, value: Any, df: Optional[Dict] = None, doc: Optional[Dict] = None, currency: Optional[str] = None) -> str: ...
    def format_date(self, date_string: str, format_string: Optional[str] = None) -> str: ...
    def parse_json(self, json_string: str) -> Any: ...
    def as_json(self, obj: Any, indent: int = 1) -> str: ...
    
    # Cache
    def cache(self) -> Any: ...
    
    # Session
    session: Any
    
    # Whitelist decorator
    def whitelist(self, *args, **kwargs) -> Callable: ...
    
    # Bold text helper
    def bold(self, text: str) -> str: ...
    
    # New document creation
    def new_doc(self, doctype: str, parent_doc: Any = None, parentfield: Optional[str] = None, as_dict: bool = False) -> _Document: ...

# The _ function for translations
def _(text: str) -> str: ...

# Expose frappe module interface
frappe: _Frappe