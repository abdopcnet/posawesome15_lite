```
┌─────────────────────────────────────────────────────────────────────────┐
│                          📱 Invoice.vue Component                        │
│                         (3,633 lines - Core POS)                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                          📐 TEMPLATE SECTION                             │
│                            (280 lines - 8%)                              │
└─────────────────────────────────────────────────────────────────────────┘

    ┌───────────────────────────────────────────────────────────┐
    │  1️⃣  Customer Section (Compact)                         │
    │  ┌─────────────────────────────────────────────────────┐ │
    │  │ 👤 Customer: [John Doe ▼]                          │ │
    │  └─────────────────────────────────────────────────────┘ │
    └───────────────────────────────────────────────────────────┘

    ┌───────────────────────────────────────────────────────────┐
    │  2️⃣  Items Data Table (v-data-table)                    │
    │  ┏━━━━━━━┳━━━━┳━━━━┳━━━━━━┳━━━━━━┳━━━━━━┳━━━━━━━━━┓    │
    │  ┃ Name  ┃ Qty┃ UOM┃ Price┃DPrice┃ Disc%┃ Total  ┃    │
    │  ┣━━━━━━━╋━━━━╋━━━━╋━━━━━━╋━━━━━━╋━━━━━━╋━━━━━━━━━┫    │
    │  ┃Item A ┃[-][5][+]┃ 100 ┃ 95  ┃  5%  ┃ 475.00┃    │
    │  ┃Item B ┃[-][2][+]┃ 200 ┃ 180 ┃ 10% ┃ 360.00┃    │
    │  ┗━━━━━━━┻━━━━┻━━━━┻━━━━━━┻━━━━━━┻━━━━━━┻━━━━━━━━━┛    │
    │                                                           │
    │  Templates:                                               │
    │  • v-slot:item.qty → Qty controls (+/- buttons)         │
    │  • v-slot:item.rate → Price input                        │
    │  • v-slot:item.discount_percentage → Discount input     │
    │  • v-slot:item.price_list_rate → Original price display │
    │  • v-slot:item.amount → Calculated total                │
    │  • v-slot:item.actions → Delete button                  │
    └───────────────────────────────────────────────────────────┘

    ┌───────────────────────────────────────────────────────────┐
    │  3️⃣  Financial Summary                                   │
    │  ┌───────────┬───────────┬──────────┬──────────────────┐ │
    │  │Total Qty:7│Inv Disc:2%│Items Disc│Before Disc: 1200││ │
    │  ├───────────┴───────────┴──────────┴──────────────────┤ │
    │  │Net Total: 950   │ Tax: 95   │ Grand Total: 1045   │ │
    │  └────────────────────────────────────────────────────┘ │
    └───────────────────────────────────────────────────────────┘

    ┌───────────────────────────────────────────────────────────┐
    │  4️⃣  Action Buttons                                      │
    │  [🖨️ Print] [💰 Pay] [↩️ Return] [⚡Quick Return] [❌ Cancel] │
    └───────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                          💾 DATA SECTION                                 │
│                         (State Management)                               │
└─────────────────────────────────────────────────────────────────────────┘

    data() {
      return {
        ┌──────────────────────────────────────────────────────┐
        │ 🏢 POS Configuration                                 │
        │ • pos_profile: { ... }     // POS settings          │
        │ • pos_opening_shift: { ... } // Current shift       │
        │ • stock_settings: { ... }   // Inventory rules      │
        └──────────────────────────────────────────────────────┘

        ┌──────────────────────────────────────────────────────┐
        │ 📄 Invoice Documents                                 │
        │ • invoice_doc: {            // Main invoice from API│
        │     name: "SAL-INV-00123",                           │
        │     customer: "John Doe",                            │
        │     grand_total: 1045,                               │
        │     items: [...],            // From server         │
        │     taxes: [...],                                    │
        │     payments: [...]                                  │
        │   }                                                  │
        │ • return_doc: { ... }       // For returns         │
        └──────────────────────────────────────────────────────┘

        ┌──────────────────────────────────────────────────────┐
        │ 👤 Customer Data                                     │
        │ • customer: "John Doe"      // Customer name/ID     │
        │ • customer_info: {          // Full details         │
        │     customer_price_list: "Retail",                   │
        │     customer_group: "VIP",                           │
        │     credit_limit: 50000                              │
        │   }                                                  │
        └──────────────────────────────────────────────────────┘

        ┌──────────────────────────────────────────────────────┐
        │ 🛒 Items Array (LOCAL STATE - Critical!)            │
        │ • items: [                                           │
        │     {                                                │
        │       item_code: "ITEM-001",                        │
        │       item_name: "Product A",                       │
        │       qty: 5,                    // ✅ User input   │
        │       uom: "Nos",                                   │
        │       price_list_rate: 100,      // ✅ MUST KEEP!  │
        │       rate: 95,                  // ✅ User input   │
        │       discount_percentage: 5,    // ✅ User input   │
        │       discount_amount: 5,        // ❌ Calculated  │
        │       amount: 475,               // ❌ Calculated  │
        │       net_amount: 475,           // ❌ Calculated  │
        │       posa_row_id: "xyz123"      // Unique ID      │
        │     },                                               │
        │     { ... }                                          │
        │   ]                                                  │
        └──────────────────────────────────────────────────────┘

        ┌──────────────────────────────────────────────────────┐
        │ 🎁 Offers & Coupons                                  │
        │ • posa_offers: [...]        // Applied offers       │
        │ • posa_coupons: [...]       // Used coupons         │
        └──────────────────────────────────────────────────────┘

        ┌──────────────────────────────────────────────────────┐
        │ ⚙️ State Management Flags                            │
        │ • _itemOperationTimer: null   // Debounce timer     │
        │ • _updatingFromAPI: false     // Prevent loops      │
        └──────────────────────────────────────────────────────┘
      }
    }

┌─────────────────────────────────────────────────────────────────────────┐
│                       🧮 COMPUTED PROPERTIES                             │
│                    (Auto-calculated values)                              │
└─────────────────────────────────────────────────────────────────────────┘

    computed: {
      ┌────────────────────────────────────────────────────┐
      │ dynamicHeaders()                                   │
      │ → Show/hide columns based on pos_profile settings │
      └────────────────────────────────────────────────────┘

      ┌────────────────────────────────────────────────────┐
      │ total_qty()                                        │
      │ → items.reduce((sum, item) => sum + item.qty, 0)  │
      └────────────────────────────────────────────────────┘

      ┌────────────────────────────────────────────────────┐
      │ total_before_discount()                            │
      │ → items.reduce((sum, item) =>                     │
      │     sum + (item.qty * item.price_list_rate), 0)   │
      └────────────────────────────────────────────────────┘

      ┌────────────────────────────────────────────────────┐
      │ hasItems() → items.length > 0                     │
      │ hasChosenPayment() → payments with amount > 0     │
      │ readonly() → invoice_doc?.is_return || false      │
      └────────────────────────────────────────────────────┘
    }

┌─────────────────────────────────────────────────────────────────────────┐
│                          ⚙️ METHODS (70+ Functions)                      │
│                         (2,115 lines - 58%)                              │
└─────────────────────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🔵 GROUP A: ITEM OPERATIONS                                           ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ add_item(item)                                           │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Validate item data                              │   │
    │ │ 2. Check if item exists in items[]                │   │
    │ │ 3. If exists: qty++                               │   │
    │ │ 4. If new:                                        │   │
    │ │    - Generate posa_row_id                         │   │
    │ │    - Set price_list_rate ✅ CRITICAL             │   │
    │ │    - Set base_rate ✅ CRITICAL                   │   │
    │ │    - items.push(new_item)                         │   │
    │ │ 5. If first item → create_draft_invoice()        │   │
    │ │ 6. Else → debouncedItemOperation()               │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ remove_item(item)                                        │
    │ → items.splice(index, 1)                                │
    │ → If last item: delete_draft_invoice()                  │
    │ → Else: debouncedItemOperation()                        │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ Quantity Controls:                                       │
    │ • increaseQuantity(item) → qty++                        │
    │ • decreaseQuantity(item) → qty--                        │
    │ • onQtyChange(item) → Manual input                      │
    │ • onQtyInput(item) → Real-time update                   │
    │   → All trigger: debouncedItemOperation()               │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ setItemRate(item, event)                                │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Parse new rate value                            │   │
    │ │ 2. item.rate = new_rate                           │   │
    │ │ 3. Recalculate discount_percentage:               │   │
    │ │    disc% = (price_list_rate - rate) / price * 100│   │
    │ │ 4. refreshTotals() - UI update                    │   │
    │ │ 5. debouncedItemOperation() - Server update       │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ setDiscountPercentage(item, event)                      │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Parse discount value                            │   │
    │ │ 2. Check max_discount limit                       │   │
    │ │ 3. Calculate new rate:                            │   │
    │ │    rate = price_list_rate * (1 - disc% / 100)    │   │
    │ │ 4. refreshTotals()                                │   │
    │ │ 5. debouncedItemOperation()                       │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ getDiscountAmount(item) - LOCAL CALCULATION             │
    │ → (price_list_rate × discount_percentage) / 100         │
    │ → No API call, instant                                  │
    └──────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🟢 GROUP B: INVOICE OPERATIONS                                        ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ create_draft_invoice()                                   │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Prepare doc = get_invoice_doc("draft")         │   │
    │ │ 2. Call create_invoice(doc) → Backend API         │   │
    │ │ 3. Receive result with calculations               │   │
    │ │ 4. invoice_doc = result (name, totals, etc.)     │   │
    │ │ 5. updateItemsCalculatedFields(result.items) ✅  │   │
    │ │    - Update: amount, net_amount, discount_amount │   │
    │ │    - Preserve: price_list_rate, rate, qty        │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ auto_update_invoice(doc, reason)                        │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ IF no invoice_doc.name:                            │   │
    │ │   → create_invoice(doc)                           │   │
    │ │ ELSE:                                             │   │
    │ │   → update_invoice(doc)                           │   │
    │ │                                                    │   │
    │ │ THEN:                                             │   │
    │ │   updateItemsCalculatedFields(result.items) ✅   │   │
    │ │   invoice_doc = {                                 │   │
    │ │     ...invoice_doc,                               │   │
    │ │     name: result.name,                            │   │
    │ │     total: result.total,                          │   │
    │ │     net_total: result.net_total,                  │   │
    │ │     grand_total: result.grand_total,              │   │
    │ │     items: this.items  // Keep local! ✅         │   │
    │ │   }                                                │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ get_invoice_doc(reason)                                 │
    │ → Build invoice object to send to backend:             │
    │   {                                                     │
    │     name: invoice_doc?.name,                           │
    │     doctype: "Sales Invoice",                          │
    │     customer: this.customer,                           │
    │     items: get_invoice_items_minimal(),                │
    │     discount_amount: this.discount_amount,             │
    │     ...                                                 │
    │   }                                                     │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ get_invoice_items_minimal()                             │
    │ → Send only essential fields to backend:               │
    │   items.map(item => ({                                 │
    │     item_code: item.item_code,                         │
    │     qty: item.qty,                                     │
    │     rate: item.rate,                                   │
    │     discount_percentage: item.discount_percentage,     │
    │     uom: item.uom                                      │
    │   }))                                                   │
    │ → Backend calculates: amount, taxes, totals            │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ cancel_invoice() / delete_draft_invoice()              │
    │ → Delete invoice from server                           │
    │ → reset_invoice_session():                             │
    │   - items = []                                          │
    │   - customer = default                                 │
    │   - invoice_doc = null                                 │
    │   - totals = 0                                          │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ new_invoice(data)                                       │
    │ IF data.name exists:                                    │
    │   → Load existing invoice                              │
    │   → items = data.items                                 │
    │ ELSE:                                                   │
    │   → Create new blank invoice                           │
    │   → items = []                                          │
    └──────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🟡 GROUP C: PAYMENT OPERATIONS                                        ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ show_payment()                                           │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Validate: customer exists && items.length > 0  │   │
    │ │ 2. process_invoice() → update_invoice()           │   │
    │ │ 3. Add default payment method if needed           │   │
    │ │ 4. evntBus.emit("send_invoice_doc_payment", doc)  │   │
    │ │ 5. evntBus.emit("show_payment", "true")           │   │
    │ │ 6. Payment.vue opens and receives invoice_doc    │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ printInvoice()                                           │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ 1. Validate payment method exists                 │   │
    │ │ 2. process_invoice()                              │   │
    │ │ 3. Submit invoice (Draft → Submitted)            │   │
    │ │ 4. Open print page in new window                  │   │
    │ │ 5. Trigger print dialog                           │   │
    │ │ 6. reset_invoice_session()                        │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ get_payments()                                           │
    │ → From invoice_doc if exists                            │
    │ → Or from pos_profile defaults                          │
    │ → Handle rounding if needed                             │
    └──────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🔴 GROUP D: CRITICAL OPERATIONS (The Solution!)                      ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ updateItemsCalculatedFields(apiItems) ⭐ THE SOLUTION   │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ PURPOSE: Update ONLY calculated fields from backend│   │
    │ │          Preserve user inputs (price_list_rate)   │   │
    │ │                                                    │   │
    │ │ ALGORITHM:                                         │   │
    │ │ 1. Create map: apiItemsMap[item_code+uom] = item │   │
    │ │ 2. For each localItem in this.items:             │   │
    │ │    - Find matching apiItem                        │   │
    │ │    - Update CALCULATED fields:                    │   │
    │ │      ✅ amount = apiItem.amount                  │   │
    │ │      ✅ net_amount = apiItem.net_amount          │   │
    │ │      ✅ discount_amount = apiItem.discount_amount│   │
    │ │      ✅ item_tax_rate = apiItem.item_tax_rate    │   │
    │ │    - DO NOT update USER INPUTS:                   │   │
    │ │      ❌ price_list_rate (KEEP LOCAL!)            │   │
    │ │      ❌ rate (user edited)                        │   │
    │ │      ❌ qty (user edited)                         │   │
    │ │      ❌ discount_percentage (user edited)         │   │
    │ │ 3. $forceUpdate() - refresh UI                   │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ mergeItemsFromAPI(apiItems) ⚠️ DEPRECATED               │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ OLD METHOD - DON'T USE!                            │   │
    │ │ Problem: this.items = apiItems                    │   │
    │ │ → Completely replaces items array                 │   │
    │ │ → Loses price_list_rate                           │   │
    │ │ → Causes the bug we're fixing!                    │   │
    │ │                                                    │   │
    │ │ Use updateItemsCalculatedFields() instead ✅      │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ debouncedItemOperation(operation) ⏱️                    │
    │ ┌────────────────────────────────────────────────────┐   │
    │ │ PURPOSE: Prevent too many API calls                │   │
    │ │                                                    │   │
    │ │ HOW IT WORKS:                                      │   │
    │ │ 1. User types "1" → Timer starts (1s)             │   │
    │ │ 2. User types "5" → Timer resets (1s)             │   │
    │ │ 3. User stops typing                               │   │
    │ │ 4. After 1 second → sendInvoiceUpdate()           │   │
    │ │                                                    │   │
    │ │ RESULT:                                            │   │
    │ │ • Without: 2 API calls ("1", "15")               │   │
    │ │ • With: 1 API call ("15")                        │   │
    │ │ • Saves: Server load, network bandwidth           │   │
    │ └────────────────────────────────────────────────────┘   │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ sendInvoiceUpdate()                                     │
    │ → Called after debounce timer expires                   │
    │ → Calls auto_update_invoice()                           │
    │ → Backend calculates and returns updated fields         │
    └──────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🟣 GROUP E: OFFERS & COUPONS                                          ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ handelOffers() / _processOffers()                       │
    │ → Fetch applicable offers from backend                  │
    │ → Cache results for 30 seconds                          │
    │ → Update posa_offers array                              │
    │ → Emit to parent component                              │
    └──────────────────────────────────────────────────────────┘

┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
┃  🟠 GROUP F: HELPERS                                                   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌──────────────────────────────────────────────────────────┐
    │ refreshTotals() → $forceUpdate()                        │
    │ generateRowId() → Unique ID for each item              │
    │ makeid(length) → Random string generator                │
    │ fetch_customer_details() → Get customer info from API   │
    │ update_price_list() → Apply customer price list        │
    └──────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                        🔄 EVENT BUS SYSTEM                               │
│                    (Communication with other components)                 │
└─────────────────────────────────────────────────────────────────────────┘

    INCOMING EVENTS (mounted):
    ┌──────────────────────────────────────────────────────────┐
    │ evntBus.on("register_pos_profile", ...) → Setup POS     │
    │ evntBus.on("add_item", ...) → Add item to invoice      │
    │ evntBus.on("item_updated", ...) → Quantity changed      │
    │ evntBus.on("item_removed", ...) → Item deleted          │
    │ evntBus.on("update_customer", ...) → Customer changed   │
    │ evntBus.on("new_invoice", ...) → Create new invoice    │
    │ evntBus.on("load_invoice", ...) → Load existing        │
    │ evntBus.on("update_invoice_offers", ...) → Apply offers│
    │ evntBus.on("payments_updated", ...) → Payment changed  │
    └──────────────────────────────────────────────────────────┘

    OUTGOING EVENTS:
    ┌──────────────────────────────────────────────────────────┐
    │ evntBus.emit("show_mesage", ...) → Toast notification   │
    │ evntBus.emit("show_payment", "true") → Open payment    │
    │ evntBus.emit("send_invoice_doc_payment", doc) → To Pay │
    │ evntBus.emit("update_pos_offers", offers) → To parent  │
    └──────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│                          🎨 STYLE SECTION                                │
│                        (1,136 lines - 31%)                               │
└─────────────────────────────────────────────────────────────────────────┘

    ⚠️  PROBLEM: Too much CSS in one file!

    BREAKDOWN:
    • Customer Section styles       (~150 lines)
    • Items Table styles            (~300 lines)
    • Quantity controls             (~150 lines)
    • Payment controls              (~200 lines)
    • Financial summary             (~150 lines)
    • Action buttons                (~100 lines)
    • Responsive styles             (~86 lines)

    ✅ SOLUTION:
    <style src="./Invoice.css" scoped></style>

┌─────────────────────────────────────────────────────────────────────────┐
│                      📊 DATA FLOW DIAGRAMS                               │
└─────────────────────────────────────────────────────────────────────────┘

SCENARIO 1: Adding an item
═══════════════════════════════════════════════════════════════════════

User clicks item
     │
     ▼
ItemsSelector.vue
     │ evntBus.emit("add_item", item)
     ▼
Invoice.vue → add_item(item)
     │
     ├─→ items.push(new_item) ✅ price_list_rate set here
     │
     ├─→ IF first item:
     │   └─→ create_draft_invoice()
     │       └─→ Backend API (create)
     │           └─→ Returns calculated fields
     │               └─→ updateItemsCalculatedFields() ✅
     │                   • Update: amount, net_amount
     │                   • Keep: price_list_rate, rate, qty
     │
     └─→ ELSE:
         └─→ debouncedItemOperation()
             └─→ [Wait 1 second]
                 └─→ sendInvoiceUpdate()
                     └─→ auto_update_invoice()
                         └─→ Backend API (update)
                             └─→ updateItemsCalculatedFields() ✅


SCENARIO 2: Changing quantity
═══════════════════════════════════════════════════════════════════════

User clicks "+" button
     │
     ▼
increaseQuantity(item)
     │
     ├─→ item.qty++ (LOCAL - instant!)
     ├─→ $forceUpdate() (UI updates immediately)
     │
     └─→ evntBus.emit("item_updated")
         └─→ debouncedItemOperation()
             └─→ [Wait 1 second]
                 └─→ sendInvoiceUpdate()
                     └─→ Backend calculates new totals
                         └─→ updateItemsCalculatedFields()
                             • amount = qty × rate (from backend)
                             • price_list_rate unchanged ✅


SCENARIO 3: Payment flow
═══════════════════════════════════════════════════════════════════════

User clicks "Pay" button
     │
     ▼
show_payment()
     │
     ├─→ Validate customer exists
     ├─→ Validate items.length > 0
     │
     ├─→ process_invoice()
     │   └─→ update_invoice() → Backend
     │       └─→ Calculate final totals
     │
     ├─→ Add default payment if needed
     │
     ├─→ evntBus.emit("send_invoice_doc_payment", invoice_doc)
     │
     └─→ evntBus.emit("show_payment", "true")
         └─→ Payment.vue opens
             └─→ Displays payment methods
                 └─→ User enters amount
                     └─→ Submit payment
                         └─→ Print receipt


┌─────────────────────────────────────────────────────────────────────────┐
│                     ⚠️ CRITICAL POINTS TO REMEMBER                       │
└─────────────────────────────────────────────────────────────────────────┘

1. ✅ ALWAYS preserve price_list_rate in add_item():
   new_item.price_list_rate = new_item.price_list_rate || new_item.rate;
   new_item.base_rate = new_item.base_rate || new_item.price_list_rate;

2. ✅ NEVER replace items array completely:
   ❌ this.items = apiItems  // BAD! Loses price_list_rate
   ✅ this.updateItemsCalculatedFields(apiItems)  // GOOD!

3. ✅ Use debounce for user inputs:
   Every qty/rate/discount change → debouncedItemOperation(1s)

4. ✅ Separate concerns:
   • Frontend: User inputs (qty, rate, discount)
   • Backend: Calculations (amount, taxes, totals)

5. ✅ updateItemsCalculatedFields() is THE solution:
   • Updates: amount, net_amount, discount_amount
   • Preserves: price_list_rate, rate, qty, discount_percentage

┌─────────────────────────────────────────────────────────────────────────┐
│                           🎯 SUMMARY                                     │
└─────────────────────────────────────────────────────────────────────────┘

Invoice.vue is the HEART of the POS system:
• Manages items, quantities, pricing
• Calculates discounts and totals
• Handles payment preparation
• Communicates with 10+ other components

SIZE: 3,633 lines (too big!)
• Template: 280 lines (UI structure)
• Script: 2,217 lines (business logic)
• Style: 1,136 lines (CSS - should be external)

SOLUTION TO BUGS:
✅ Use updateItemsCalculatedFields() not mergeItemsFromAPI()
✅ Preserve price_list_rate locally
✅ Backend calculates, Frontend displays
✅ Debounce user inputs (1 second)

RECOMMENDED IMPROVEMENTS:
1. Split into smaller components
2. Extract CSS to external file
3. Use Composition API
4. Create composables (useInvoice, useItems, usePayments)
5. Target: < 500 lines per component

═══════════════════════════════════════════════════════════════════════════
```
